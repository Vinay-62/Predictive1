# -*- coding: utf-8 -*-
"""LVADSUSR131_vinay_lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17fh82pfTU17Ndl8ZBWsKMCTryrlj0HyR
"""

import pandas as pd
import matplotlib.pyplot as plt
data=pd.read_csv("/content/booking.csv")
df=pd.DataFrame(data)
df.head()

# Null values Handling
print("Null Values: ", data.isnull().sum())
data = data.dropna()
data = data.drop(['date of reservation'], axis = 1)

#outlier handling
import matplotlib.pyplot as plt
plt.boxplot(df['number of weekend nights'])
plt.show()

#outlier handling
data = data[data['number of weekend nights']<=5]

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
data['Booking_ID'] = encoder.fit_transform(data['Booking_ID'])
data['type of meal'] = encoder.fit_transform(data['type of meal'])
data['room type'] = encoder.fit_transform(data['room type'])
data['market segment type'] = encoder.fit_transform(data['market segment type'])
data['booking status'] = encoder.fit_transform(data['booking status'])

from sklearn.linear_model import LogisticRegression
X=df.drop(['booking status','date of reservation'],axis=1)
y=df['booking status']
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.1,random_state=42)

model=LogisticRegression()
clf=model.fit(X_train,y_train)
prediction=clf.predict(X_test)

from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score,confusion_matrix
print("accuracy score :",accuracy_score(y_test,prediction)*100,"\n")
print("Precision :",precision_score(y_test,prediction, average='weighted'),'\n')
print("Recall :",recall_score(y_test, prediction, average='weighted'),'\n')
print("F1 score :",f1_score(y_test,prediction, average='weighted'))

# decision tree classifier
from sklearn.tree import DecisionTreeClassifier
tree_model = DecisionTreeClassifier()

tree_model.fit(X_train, y_train)
y_pred2 = tree_model.predict(X_test)

print("Decision Tree Classifier")
print("accuracy score of Decision Tree Classifier  :",accuracy_score(y_test,prediction)*100)
print("Precision :", precision_score(y_test,prediction, average='weighted'))
print("Recall :", recall_score(y_test,prediction, average='weighted'))
print("F1 score :",f1_score(y_test,prediction, average='weighted'))
print("Confusion Matrix", confusion_matrix(y_test,prediction))